package edu.kit.aifb.IntelliCloudBench.ui;

import java.text.DecimalFormat;
import java.util.Locale;
import java.util.Observable;
import java.util.Observer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.VerticalLayout;

import edu.kit.aifb.libIntelliCloudBench.model.InstanceState;

public class InstanceProgressComponent extends CustomComponent implements Observer {
	private static final long serialVersionUID = 5201537358020682634L;

	private HorizontalLayout mainLayout;
	private VerticalLayout verticalLayout_2;
	private Label statusLabel;
	private ProgressIndicator progressBar;
	private VerticalLayout verticalLayout_1;
	private Label hardwareTypeLabel;
	private Label regionLabel;
	private Label providerLabel;
	private Label costsLabel;

	private RunningBenchmarksPanel parent;
	private InstanceState instanceState;

	public InstanceProgressComponent(RunningBenchmarksPanel parent, InstanceState instanceState) {
		this.instanceState = instanceState;
		this.instanceState.addObserver(this);
		this.parent = parent;

		buildMainLayout();
		setCompositionRoot(mainLayout);

		setStyleName("grey_background");

		providerLabel.setValue(instanceState.getInstanceType().getProvider().getName());
		regionLabel.setValue(instanceState.getInstanceType().getRegion().getId());
		hardwareTypeLabel.setValue(instanceState.getInstanceType().getHardwareType().getName());

		update();
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1);
		mainLayout.setExpandRatio(verticalLayout_1, 1f);

		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		mainLayout.setExpandRatio(verticalLayout_2, 4f);
		mainLayout.setComponentAlignment(verticalLayout_2, new Alignment(48));

		costsLabel = new Label("<b>$ 0.00</b>", Label.CONTENT_XHTML);
		costsLabel.setCaption("Est. costs");
		costsLabel.setWidth("100%");
		costsLabel.setHeight("100%");
		mainLayout.addComponent(costsLabel);
		mainLayout.setExpandRatio(costsLabel, 0.2f);
		mainLayout.setComponentAlignment(costsLabel, Alignment.MIDDLE_LEFT);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(true);
		verticalLayout_1.setSpacing(true);

		// provider
		providerLabel = new Label();
		providerLabel.setImmediate(false);
		providerLabel.setWidth("100.0%");
		providerLabel.setHeight("-1px");
		providerLabel.setValue("Label");
		verticalLayout_1.addComponent(providerLabel);

		// region
		regionLabel = new Label();
		regionLabel.setImmediate(false);
		regionLabel.setWidth("100.0%");
		regionLabel.setHeight("-1px");
		regionLabel.setValue("Label");
		verticalLayout_1.addComponent(regionLabel);

		// hardwareType
		hardwareTypeLabel = new Label();
		hardwareTypeLabel.setImmediate(false);
		hardwareTypeLabel.setWidth("100.0%");
		hardwareTypeLabel.setHeight("-1px");
		hardwareTypeLabel.setValue("Label");
		verticalLayout_1.addComponent(hardwareTypeLabel);

		return verticalLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(true);
		verticalLayout_2.setSpacing(true);

		// progressBar
		progressBar = new ProgressIndicator();
		progressBar.setImmediate(true);
		progressBar.setWidth("100.0%");
		progressBar.setHeight("-1px");
		verticalLayout_2.addComponent(progressBar);
		verticalLayout_2.setComponentAlignment(progressBar, Alignment.BOTTOM_CENTER);

		// status
		statusLabel = new Label();
		statusLabel.setImmediate(true);
		statusLabel.setWidth("100.0%");
		statusLabel.setHeight("-1px");
		statusLabel.setValue("Label");
		verticalLayout_2.addComponent(statusLabel);
		verticalLayout_2.setComponentAlignment(statusLabel, Alignment.TOP_CENTER);

		Button logButton = new Button("Show log");
		logButton.setWidth("-1px");
		logButton.setHeight("-1px");
		logButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 7156125991837195880L;

			@Override
			public void buttonClick(ClickEvent event) {
				InstanceProgressComponent.this.getWindow().addWindow(new LogWindow(instanceState));
			};
		});
		verticalLayout_2.addComponent(logButton);
		verticalLayout_2.setComponentAlignment(logButton, Alignment.BOTTOM_RIGHT);

		return verticalLayout_2;
	}

	private void update() {
		float progress = instanceState.getPercentage();
		String status = instanceState.getStatus();

		progressBar.setValue(progress);
		statusLabel.setValue(status);
		updateEstimatedCosts();

		parent.update();
	}

	private void updateEstimatedCosts() {
	  double estCosts = instanceState.getEstimatedCosts();
	  
		DecimalFormat dollarFormat = (DecimalFormat) DecimalFormat.getInstance(Locale.US);
		dollarFormat.applyPattern("<b>$ ###.##</b>");
		
		costsLabel.setValue(dollarFormat.format(estCosts));
  }

	@Override
	public void update(Observable arg0, Object arg1) {
		update();
	}

	public void finish() {
		instanceState.deleteObserver(this);
	}

}
